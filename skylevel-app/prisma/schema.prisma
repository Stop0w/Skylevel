// Skylevel Database Schema - Phase 2 Implementation
// Complete schema for AI-powered candidate intelligence layer

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// USERS & AUTHENTICATION
// ============================================

model User {
  id            String    @id @default(uuid())
  clerkId       String    @unique // Clerk user ID
  email         String    @unique
  name          String
  role          UserRole  @default(RECRUITER)
  company       String?
  avatarUrl     String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  jobs          Job[]
  shortlists    Shortlist[]
  activities    Activity[]

  @@index([clerkId])
  @@index([email])
  @@map("users")
}

enum UserRole {
  RECRUITER
  HIRING_MANAGER
  ADMIN
  CANDIDATE
}

// ============================================
// JOBS
// ============================================

model Job {
  id              String      @id @default(uuid())
  title           String
  company         String
  location        String
  description     String      @db.Text
  responsibilities String[]
  qualifications  String[]
  benefits        String[]
  requiredSkills  Json        // Array of {name, importance}
  preferredSkills Json?
  salaryMin       Int?
  salaryMax       Int?
  salaryCurrency  String      @default("USD")
  status          JobStatus   @default(OPEN)

  // JobPrintâ„¢ Calibration
  tmsWeight       Float       @default(0.5)
  srsWeight       Float       @default(0.3)
  rnsWeight       Float       @default(0.2)
  customWeights   Json?       // Advanced calibration

  // Metadata
  recruiterId     String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  closedAt        DateTime?

  // Relations
  recruiter       User        @relation(fields: [recruiterId], references: [id])
  applications    Application[]
  fitScores       FitScore[]
  shortlists      Shortlist[]

  @@index([recruiterId])
  @@index([status])
  @@index([createdAt])
  @@map("jobs")
}

enum JobStatus {
  DRAFT
  OPEN
  CLOSED
  ARCHIVED
}

// ============================================
// CANDIDATES
// ============================================

model Candidate {
  id          String        @id @default(uuid())
  email       String        @unique
  name        String
  phone       String?
  location    String
  role        String

  // Skills
  skills      Json          // Array of {name, proficiency}

  // External profiles
  resumeUrl   String?
  linkedinUrl String?
  githubUrl   String?
  portfolioUrl String?

  // Work samples
  workSamples Json?         // Array of {title, url, description}

  // Metadata
  source      String?       // 'direct', 'referral', 'ats_import'
  status      CandidateStatus @default(NEW)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  applications    Application[]
  fitScores       FitScore[]
  referrals       Referral[]
  shortlistEntries ShortlistCandidate[]

  @@index([email])
  @@index([status])
  @@index([createdAt])
  @@map("candidates")
}

enum CandidateStatus {
  NEW
  REVIEWING
  SHORTLISTED
  INTERVIEWING
  OFFERED
  HIRED
  REJECTED
  WITHDRAWN
}

// ============================================
// APPLICATIONS
// ============================================

model Application {
  id          String    @id @default(uuid())
  candidateId String
  jobId       String

  // Application data
  coverLetter String?   @db.Text
  answers     Json?     // Custom questions

  // Status tracking
  status      ApplicationStatus @default(SUBMITTED)
  viewedAt    DateTime?
  reviewedAt  DateTime?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  job         Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@unique([candidateId, jobId]) // One application per candidate-job pair
  @@index([jobId])
  @@index([status])
  @@map("applications")
}

enum ApplicationStatus {
  SUBMITTED
  VIEWED
  UNDER_REVIEW
  SHORTLISTED
  REJECTED
}

// ============================================
// FIT SCORES
// ============================================

model FitScore {
  id          String    @id @default(uuid())
  candidateId String
  jobId       String

  // Score components
  overall     Float
  tms         Float     // Technical Match Score
  srs         Float     // Soft Skills Rating
  rns         Float     // Referral Network Score

  // Confidence & explanation
  confidence  ScoreConfidence
  explanation Json      // {tms: "...", srs: "...", rns: "..."}

  // Version tracking
  version     Int       @default(1)
  calculatedAt DateTime @default(now())

  // Relations
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  job         Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@unique([candidateId, jobId, version])
  @@index([overall])
  @@index([calculatedAt])
  @@map("fit_scores")
}

enum ScoreConfidence {
  HIGH      // 3+ referrals, all data complete
  MEDIUM    // 1-2 referrals, most data complete
  LOW       // No referrals, self-reported only
}

// ============================================
// REFERRALS
// ============================================

model Referral {
  id          String    @id @default(uuid())
  candidateId String
  referrerId  String?   // If referrer is registered user

  // Referrer info
  referrerName  String
  referrerEmail String?
  relationship  ReferralRelationship
  yearsWorked   Int

  // Validation data
  skillsValidated Json    // Array of {name, rating}
  feedback        String? @db.Text

  // Trust calculation
  trustScore      Int     // 0-100, calculated based on network

  // Access control
  token           String  @unique  // For public access
  submittedAt     DateTime @default(now())

  // Relations
  candidate       Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  referrer        Referrer? @relation(fields: [referrerId], references: [id])

  @@index([candidateId])
  @@index([token])
  @@map("referrals")
}

enum ReferralRelationship {
  COLLEAGUE
  MANAGER
  DIRECT_REPORT
  CLIENT
  MENTOR
  OTHER
}

model Referrer {
  id          String    @id @default(uuid())
  name        String
  email       String    @unique
  linkedinUrl String?
  company     String?
  role        String?

  // Credibility scoring
  credibilityScore Int  @default(50) // 0-100
  referralCount    Int  @default(0)

  createdAt   DateTime  @default(now())

  // Relations
  referrals   Referral[]

  @@index([email])
  @@map("referrers")
}

// ============================================
// SHORTLISTS
// ============================================

model Shortlist {
  id          String    @id @default(uuid())
  name        String
  jobId       String
  recruiterId String

  // Sharing
  shareToken  String    @unique
  isPublic    Boolean   @default(false)

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  job         Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)
  recruiter   User      @relation(fields: [recruiterId], references: [id])
  candidates  ShortlistCandidate[]

  @@index([jobId])
  @@index([recruiterId])
  @@index([shareToken])
  @@map("shortlists")
}

model ShortlistCandidate {
  id          String    @id @default(uuid())
  shortlistId String
  candidateId String
  position    Int       @default(0) // For ordering
  notes       String?   @db.Text

  addedAt     DateTime  @default(now())

  // Relations
  shortlist   Shortlist @relation(fields: [shortlistId], references: [id], onDelete: Cascade)
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)

  @@unique([shortlistId, candidateId])
  @@index([shortlistId])
  @@map("shortlist_candidates")
}

// ============================================
// BIAS AUDIT
// ============================================

model BiasAudit {
  id          String    @id @default(uuid())
  jobId       String

  // Metrics
  totalCandidates Int
  passThroughRate Float

  // Demographic breakdown (anonymized aggregates)
  genderDistribution    Json
  ethnicityDistribution Json

  // Disparity flags
  disparities Json      // Array of {category, variance, flagged}

  // Compliance
  complianceScore Int   // 0-100
  recommendation  String? @db.Text

  generatedAt DateTime  @default(now())

  @@index([jobId])
  @@index([generatedAt])
  @@map("bias_audits")
}

// ============================================
// ACTIVITY LOG
// ============================================

model Activity {
  id          String    @id @default(uuid())
  userId      String
  type        ActivityType
  entityType  String    // 'candidate', 'job', 'shortlist'
  entityId    String
  metadata    Json?

  createdAt   DateTime  @default(now())

  // Relations
  user        User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([createdAt])
  @@map("activities")
}

enum ActivityType {
  VIEWED
  CREATED
  UPDATED
  DELETED
  SHORTLISTED
  REVIEWED
  SCHEDULED
  HIRED
  REJECTED
}

// ============================================
// NOTIFICATIONS
// ============================================

model Notification {
  id        String    @id @default(uuid())
  userId    String
  type      NotificationType
  title     String
  message   String    @db.Text
  link      String?
  read      Boolean   @default(false)

  createdAt DateTime  @default(now())
  readAt    DateTime?

  @@index([userId])
  @@index([read])
  @@index([createdAt])
  @@map("notifications")
}

enum NotificationType {
  HOT_CANDIDATE      // 90+ score
  NEW_APPLICATION
  NEW_REFERRAL
  SCORE_UPDATED
  INTERVIEW_SCHEDULED
  BIAS_ALERT
}